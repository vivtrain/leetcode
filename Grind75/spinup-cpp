#!/bin/bash

LC_NUMBER=$1
LC_TITLE=$2
SNAKE_CASE=$(echo $2 | sed -e 's/\([A-Z][a-z]*\)/_\1/g' | \
  sed -e 's/^_//' | tr [:lower:] [:upper:])

echo "Spinning up new cpp sandbox in directory:"
echo "    `pwd`/$LC_TITLE/"

# Make the directories and cd into it
mkdir "$LC_NUMBER-$LC_TITLE"
CPP="$LC_NUMBER-$LC_TITLE/cpp"
mkdir "$CPP"
cd $CPP

# C++ Header
printf "\
#ifndef $SNAKE_CASE
#define $SNAKE_CASE

class $LC_TITLE {
  public:
    
  private:
};

#endif

" > $LC_TITLE.h

# C++ Implementation file
printf "#include \"$LC_TITLE.h\"\n\n\n" > $LC_TITLE.cpp

# C++ Test file containing main
printf "\
#include \"$LC_TITLE.h\"
#include <iostream>
#include <cassert>

int main() {
  $LC_TITLE soln;
}

" > test.cpp

# Makefile
printf "\
UTIL_DIR = ../../Utility/cpp
INCLUDE_DIR = \$(UTIL_DIR)/include
IMPL_DIR = \$(UTIL_DIR)/include/impl
UTIL_OBJ_DIR = \$(UTIL_DIR)/obj
CPP = g++ -std=c++11

run: $LC_TITLE.o test.cpp
\t\$(CPP) $^ -o run -I\$(INCLUDE_DIR)

$LC_TITLE.o: $LC_TITLE.h $LC_TITLE.cpp
\t\$(CPP) -c $^ -I\$(INCLUDE_DIR)

clean:
\trm -rf run *.o *.gch

" > makefile

printf "\
import os

CPP_INCL_DIR = os.path.abspath(os.path.dirname('../../Utility/cpp/include'))
CPP_IMPL_DIR = os.path.abspath(os.path.dirname('../../Utility/cpp/include/impl'))

flags = [ '-std=c++11', '-I'+CPP_INCL_DIR , '-I'+CPP_IMPL_DIR ]

def FlagsForFile(filename, **kwargs):
  return {
      'flags': flags,
      'do_cache': True
      }

" > .ycm_extra_conf.py

vim $LC_TITLE.h +"vsp $LC_TITLE.cpp" +"wincmd h" +"sp test.cpp" \
    +"wincmd k" +mks +wa +"normal 6gg" +"startinsert!"

